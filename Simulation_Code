library(mvtnorm)
library(survival)
library(gee)
library(geecure)
library(SimCorMultRes)
library(copula)
library(survsim)
library(gmm)
library(ggplot2)
library(ggpubr)
library(latex2exp)


COV.Matrix<-function(prob.v){
  W<-prob.v
  D1<-matrix(sqrt(W*(1-W)),ncol=1)%*%t(matrix(sqrt(W*(1-W)),ncol=1))
  return(D1)
}

moments.g.1<-function(theta,data){
  y<-matrix(data[,6],ncol=1)
  Q<-matrix(data[,7])
  theta.1<-matrix(theta,ncol=1)
  Q<-cbind(1,Q)
  mu<-exp(Q%*%theta.1)
  G<-c(y-mu/(1+mu))*Q
  #G.1<-cbind(G,c(y-mu/(1+mu)))
  return(G)
}

#==Run that========
#Type I II III 
moments.G1<-function(theta,data){
  alpha.u1<-alpha.u
  y<-matrix(data[,1],ncol=1)
  x<-matrix(data[,2])
  #
  Wi<-matrix(data[,6],ncol=1)
  theta.1<-matrix(theta,ncol=1)
  status<-data[,5]
  G<-matrix(0,ncol=1,nrow=dim(data)[1])
  q.1<-cbind(1,x)
  #q.2<-(data[,c(8,9)])
  q.2<-(data[,-c(1:7)])
  mu<-q.1%*%theta.1
  G<-c(status-(exp(mu)*(y)^(alpha.u1)))
  G.1<-c(Wi)*c(G)
  G.2<-c(G.1)*q.2
  return(G.2)
  #Another one 
  #G.2.1<-c()
  #for(i in 1:(dim(q.2)[1]/5)){G.2.1<-rbind(G.2.1,apply(G.2[(5*(i-1)+1):(5*i),],2,sum))}
  #return(G.2.1)
  #Another one -1
  #G.2.1<-c()
  #for(i in 1:length(table(data[,3]))){G.2.1<-rbind(G.2.1,apply(G.2[which(data[,3]==names(table(data[,3]))[i]),],2,sum))}
  #return(G.2.1)
}

#==========
moments.alpha<-function(theta,data){
  y<-matrix(data[,1],ncol=1)
  x<-matrix(data[,2])
  Wi<-matrix(data[,6],ncol=1)
  theta.1<-matrix(theta,ncol=1)
  status<-data[,5]
  x.1<-rep(1,dim(data)[1])
  q.1<-cbind(x.1,x)
  G.A<-(log(y)*(Wi*status-Wi*(y^(theta))*exp(q.1%*%Beta.b))+status/theta)
  return(G.A)
  #Another one 
  #G.A.1<-c()
  #for(i in 1:(dim(q.2)[1]/5)){G.A.1<-c(G.A.1,sum(G.A[(5*(i-1)+1):(5*i),]))}
  #return(G.A.1)
  #Another one -1
  #G.A.1<-c()
  #for(i in 1:length(table(data[,3]))){G.A.1<-c(G.A.1,sum(G.A[which(data[,3]==names(table(data[,3]))[i]),]))}
  #return(G.A.1)
}


#========================
#Type II
#========================
#estimation
Censor.rate<-c()
gamma.S<-c()
gamma.V<-c()
gamma.B<-c()
beta.S<-c()
beta.V<-c()
beta.B<-c()
alpha.B<-c()
alpha.SS<-c()
#
GAMMA.SW.bv<-c()
BETA.SW.bv<-c()
ALPHA.SW.bv<-c()
#
GAMMA.SW.bv1<-c()
BETA.SW.bv1<-c()
ALPHA.SW.bv1<-c()
#Sim time dependent -  z independent type I 
#Survival outcome
#b.0<-log(2);b.1<-(-1);b.2<--0.5
#gamma.0<-0.4;gamma.1<-c(-1)
#r.1<-0.2
#alpha<-1

#cox.e<-c();gmm.s<-c();logis<-c();gmm.l<-c()
N<-100
#clsize<-1
#replicated<-5
#R<-0.6
#tau<-0
#simulation

system.time(
  for(sim in 1:100){
    print(sim)
    #sim<-1
    sdata.t<-Data.type2.0.6[[sim]]
    sdata.t<-sdata.t[,c(1:7)]
    #estimation
    q.1<-cbind(1,sdata.t[,2])
    #Case I
    #q.2<-cbind(rep(t(sapply(1:(dim(q.1)[1]/replicated),function(i) apply((q.1[(replicated*(i-1)+1):(replicated*i),]),2,mean)))[,1],each=replicated),rep(t(sapply(1:(dim(q.1)[1]/replicated),function(i) apply((q.1[(replicated*(i-1)+1):(replicated*i),]),2,mean)))[,2],each=replicated))
    q.2<-cbind(rep(t(sapply(1:N,function(i) apply((q.1[which(sdata.t$ID==i),]),2,mean)))[,1],as.numeric(table(sdata.t$ID))),rep(t(sapply(1:N,function(i) apply((q.1[which(sdata.t$ID==i),]),2,mean)))[,2],as.numeric(table(sdata.t$ID))))
    #Case II
    #q.2<-c()
    #Fixed replicated time
    #for(i in 1:(dim(q.1)[1]/replicated)){q.2<-rbind(q.2,t(sapply(((replicated*(i-1)+1):(replicated*i)),function(j) apply(matrix(q.1[j:(replicated*i),],ncol=2),2,mean))))}
    #no fixed replicated time
    #for(i in 1:N){q.2<-rbind(q.2,t(sapply(which(sdata.t$ID==i),function(j) apply(matrix(q.1[j:max(which(sdata.t$ID==i)),],ncol=2),2,sum))))}
    #Case III
    #q.2<-q.1
    #q.2.1<-q.1*rep(1/(replicated:1),N)
    #q.2.1<-q.1*rep(c(1,1,1,1,1),N)
    #sq<-c()
    #for(k in 1:N){sq<-c(sq,c(((replicated*(k-1))+2):((replicated*(k-1))+replicated),((replicated*(k-1))+replicated)))}
    #q.2.2<-q.1[sq,]*rep(c(1/(replicated:2),0),N)
    #q.2.2<-q.1[sq,]*rep(c(1,1,1,1,0),N)
    #q.2<-cbind(q.2.1,q.2.2)
    #
    sdata.t<-cbind(sdata.t,q.2)
    #X.D<-matrix(0,ncol=replicated,nrow=c(N*replicated))
    #sque<-c(1:c(N*replicated));sque.1<-c(1:c(N*replicated))
    #
    #X.D[sque,1]<-sdata.t$X[sque.1]
    #for(i in 0:(replicated-2)){
    #  (sque<-sque[-seq(replicated-i,c(N*replicated),(replicated-i))])
    #  (sque.1<-sque.1[-seq(1,c(N*replicated),(replicated-i))])
    #  X.D[sque,(i+2)]<-sdata.t$X[sque.1]
    #}
    #sdata.t<-cbind(sdata.t,X.D)
    #
    #Fixed replicated time
    #CN<-seq(0,N*replicated,replicated)[-1]
    #no fixed replicated time
    CN<-cumsum(table(sdata.t$ID))
    #
    #names(sdata)[5]<-c("status.1")
    #head(sdata)
    #table(sdata$status.1)
    #sdata<-data.frame(sdata,Tstat=tstat,Tstop=tstop)
    #####
    Censor.rate<-c(Censor.rate,table(sdata.t[CN,]$status.1)[2]/(N))
    #sdata.raw<-sdata
    #sdata.t[,6]<-sdata$status.1
    #estimation
    #Type I alpha.u<-0.8; Type II alpha.u<-0.2
    alpha.u<-0.8
    #
    my_gmm.2<-gmm(moments.G1,x=sdata.t,t0=c(0,0),type="iterative",crit = 1e-25, 
                  wmatrix = "optimal", method = "Nelder-Mead", control = list(reltol = 1e-25, maxit = 20000))
    
    (beta.00<-my_gmm.2$coefficients)
    sdata.t.2<-sdata.t[CN,]
    my_gmm.1<-gmm(moments.g.1,x=sdata.t.2,t0=c(0,0),type="iterative",wmatrix = "optimal",method = "Nelder-Mead",
                  control = list(reltol = 1e-25, maxit=20000))
    (gamma.00<-my_gmm.1$coefficients)
    #alpha.1
    #Beta.b<-matrix(beta.00,ncol=1)
    #my_gmm.3<-gmm(moments.alpha,x=sdata.t,t0=c(1),type="iterative",wmatrix = "optimal")
    #alpha.u<-my_gmm.3$coefficients
    #
    #estimation of parameters
    K.1<-0
    tryCatch({
    while(1){
      Wi<-sapply(1:dim(sdata.t)[1],function(i){
        S3<-exp(-exp(beta.00[1]+beta.00[2]*sdata.t$X[i])*(sdata.t$Surv.Time[i]^alpha.u))
        S.h<-exp(-sdata.t$Surv.Time[i]/240)
        #S.h<-exp(-(sdata.t$Surv.Time[i]/350.16)^(13.66))
        pi<-exp(gamma.00[1]+gamma.00[2]*sdata.t$Z[i])
        sdata.t$status.1[i]+((1-sdata.t$status.1[i])*pi*(S3)/((S.h)+(pi*S3)))
      })
      sdata.t[,6]<-Wi
      #surivival
      #my_gmm.5<-gmm(moments.G1,x=sdata.t,t0=c(beta.00[1],beta.00[2]),type="iterative",crit = 1e-25, 
      #              wmatrix = "optimal", method = "Nelder-Mead", control = list(reltol = 1e-25, maxit = 20000))
      my_gmm.5<-gmm(moments.G1,x=sdata.t,t0=c(0,0),type="iterative",crit = 1e-25, 
                    wmatrix = "optimal", method = "Nelder-Mead", control = list(reltol = 1e-25, maxit = 20000))
      (beta.001<-my_gmm.5$coefficients)
      #(beta.001<-c((b.0-((b.2^2)/2)),(b.1+r.1*b.2)))
      #Cure
      sdata.t.2<-sdata.t[CN,]
      #c(gamma.00[1],gamma.00[2])
      #my_gmm.4<-gmm(moments.g.1,x=sdata.t.2,t0=c(gamma.00[1],gamma.00[2]),type="iterative",crit = 1e-25,
      #              wmatrix = "optimal",method = "Nelder-Mead",control = list(reltol = 1e-25, maxit=20000))
      my_gmm.4<-gmm(moments.g.1,x=sdata.t.2,t0=c(0,0),type="iterative",crit = 1e-25,
                                wmatrix = "optimal",method = "Nelder-Mead",control = list(reltol = 1e-25, maxit=20000))
      (gamma.001<-my_gmm.4$coefficients)
      #alpha
      Beta.b<-matrix(beta.001,ncol=1)
      #x<-matrix(sdata.t[,2])
      #x.1<-rep(1,dim(sdata.t)[1])
      #q.1<-cbind(x.1,x)
      #alpha.S<--sum(sdata.t$status)/sum(Wi*log(sdata.t$Surv.Time)*(sdata.t$status-(sdata.t$Surv.Time^alpha.u)*exp(q.1%*%Beta.b)))
      #my_gmm.t3<-gmm(moments.alpha,x=sdata.t,t0=c(alpha.u),optfct=c("nlminb"))
      my_gmm.t3<-gmm(moments.alpha,x=sdata.t,t0=c(0.8),optfct=c("nlminb"))
      (alpha.S<-my_gmm.t3$coefficients)
      
      if(max(abs(gamma.001-gamma.00))<1e-03&max(abs(beta.001-beta.00))<1e-03&max(abs(alpha.S-alpha.u))<1e-03|K.1>100)
        break
      beta.00<-beta.001
      gamma.00<-gamma.001
      alpha.u<-alpha.S
      K.1<-K.1+1
    }
    alpha.11<-alpha.S
    beta.G<-beta.001
    gamma.G<-gamma.001
    },error=function(e){})
    #
    #b.0<-log(2);b.1<-(-1);b.2<--0.5
    #gamma.0<-0.4;gamma.1<-c(-1)
    #r.1<-0.6
    #beta.ture<-c((b.0-((b.2^2)/2)),(b.1+r.1*b.2))
    #Beta.b<-matrix(beta.ture,ncol=1)
    #Beta.b<-matrix(beta.001,ncol=1)
    
    #x<-matrix(sdata.t[,2])
    #x.1<-rep(1,dim(sdata.t)[1])
    #q.1<-cbind(x.1,x)
    #alpha.S<--sum(sdata.t$status)/sum(Wi*log(sdata.t$Surv.Time)*(sdata.t$status-(sdata.t$Surv.Time^alpha.u)*exp(q.1%*%Beta.b)))
    #
    beta.S<-rbind(beta.S,beta.001)
    gamma.S<-rbind(gamma.S,gamma.001)
    alpha.B<-c(alpha.B,alpha.S)

    
    #estimated variance: no fixed replicated time
    #Sandwitch
    Z.t.1<-data.matrix(cbind(1,sdata.t[CN,7]))
    X.t.1<-data.matrix(cbind(1,sdata.t[,2]))
    X.t.2<-q.2
    #X.t.1<-data.matrix(cbind(1,sdata.t[,8]))
    gamma.11<-matrix(gamma.001,ncol=1)
    beta.11<-matrix(beta.001,ncol=1)
    alpha.t.S1<-alpha.S
    pi<-exp(Z.t.1%*%gamma.11)/(1+exp(Z.t.1%*%gamma.11))
    #Bread 1
    G1.sec<-0;B1.sec<-0;B2.sec<-0;A1.sec<-0;A2.sec<-0
    ##cured
    for(i in 1:N){
      pi.sec.t<--(matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1))*pi[i]*(1-pi[i])
      G1.sec<-G1.sec+pi.sec.t
    }
    ##survival
    for(i in 1:dim(sdata.t)[1]){
      B1.sec.t<--sdata.t$Cure[i]*(matrix(X.t.2[i,],ncol=1)%*%matrix(X.t.1[i,],nrow=1))*(sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))
      B1.sec<-B1.sec+B1.sec.t
      B2.sec.t<--sdata.t$Cure[i]*matrix(X.t.2[i,],ncol=1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))*(sdata.t$Surv.Time[i]^alpha.t.S1)*log(sdata.t$Surv.Time[i])
      B2.sec<-B2.sec+B2.sec.t
      A1.sec.t<--sdata.t$Cure[i]*(sdata.t$Surv.Time[i]^alpha.t.S1)*log(sdata.t$Surv.Time[i])*matrix(X.t.1[i,],nrow=1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))
      A1.sec<-A1.sec+A1.sec.t
      A2.sec.t<--sdata.t$Cure[i]*((log(sdata.t$Surv.Time[i]))^2)*(sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))-(sdata.t$status.1[i]/(alpha.t.S1^2))
      A2.sec<-A2.sec+A2.sec.t
    }
    Bread.t1<-cbind(G1.sec,matrix(0,nrow=dim(Z.t.1)[2],ncol=dim(X.t.1)[2]),matrix(0,nrow=dim(Z.t.1)[2],ncol=1))
    Bread.t2<-cbind(matrix(0,nrow=dim(X.t.1)[2],ncol=dim(Z.t.1)[2]),B1.sec,B2.sec)
    Bread.t3<-cbind(matrix(0,nrow=1,ncol=dim(Z.t.1)[2]),A1.sec,A2.sec)
    BREAD<-rbind(Bread.t1,Bread.t2,Bread.t3)
    #
    #Bread 2
    ##cured
    GG.sec<-0;GB.sec<-0;GA.sec<-0;BB.sec<-0;BA.sec<-0;AA.sec<-0
    for(i in 1:N){
      GG.sec.t<-matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1)*(sdata.t$Cure[CN[i]]*(1-sdata.t$Cure[CN[i]]))
      GG.sec<-GG.sec+GG.sec.t
      GB.sec.t<-matrix(Z.t.1[i,],ncol=1)%*%matrix(X.t.2[CN[i],],nrow=1)*(sdata.t$Cure[CN[i]]*(1-sdata.t$Cure[CN[i]]))*(sdata.t$status.1[CN[i]]-(sdata.t$Surv.Time[CN[i]]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[CN[i],],ncol=1))))
      GB.sec<-GB.sec+GB.sec.t
      GA.sec.t<-matrix(Z.t.1[i,],ncol=1)%*%(sdata.t$Cure[CN[i]]*(1-sdata.t$Cure[CN[i]]))*log(sdata.t$Surv.Time[CN[i]])*(sdata.t$status.1[CN[i]]-((sdata.t$Surv.Time[CN[i]]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[CN[i],],ncol=1))))+(sdata.t$status.1[CN[i]]/alpha.t.S1))
      GA.sec<-GA.sec+GA.sec.t
    }
    ##Survival
    #for(i in 1:c(N*replicated)){
    #  BB.sec.t<-(c((sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))^2)*c(sdata.t$Cure[i]*(1-sdata.t$Cure[i])))*matrix(X.t.2[i,],ncol=1)%*%matrix(X.t.2[i,],nrow=1)
    #  BB.sec<-BB.sec+BB.sec.t
    #  BA.sec.t<-matrix(X.t.2[i,],ncol=1)*((sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1))))))*
    #    ((sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1))))+sdata.t$status.1[i]/alpha.t.S1))*(sdata.t$Cure[i]*(1-sdata.t$Cure[i]))*log(sdata.t$Surv.Time[i])
    #  BA.sec<-BA.sec+BA.sec.t
    #  AA.sec.t<-((log(sdata.t$Surv.Time[i])*(sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))+sdata.t$status.1[i]/alpha.t.S1)^2)*(sdata.t$Cure[i]*(1-sdata.t$Cure[i]))
    #  AA.sec<-AA.sec+AA.sec.t
    #}
    #Bread2.t1<-cbind(GG.sec,GB.sec,GA.sec)
    #Bread2.t2<-cbind(t(GB.sec),BB.sec,BA.sec)
    #Bread2.t3<-cbind(t(GA.sec),t(BA.sec),AA.sec)
    #BREAD2<-rbind(Bread2.t1,Bread2.t2,Bread2.t3)
    #
    #Bread 2-New
    for(i in names(table(sdata.t$ID))){
      #BB
      BB.b<-sapply(which(sdata.t$ID==i),function(g)
        t(X.t.2[g,]*(sdata.t$status.1[g]-((sdata.t$Surv.Time[g]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[g,],ncol=1)))))))
      BB.v<-COV.Matrix(sdata.t$Cure[which(sdata.t$ID==i)])
      BB.sec.t<-BB.b%*%BB.v%*%t(BB.b)
      BB.sec<-BB.sec+BB.sec.t
      #BA
      BA.b2<-sapply(which(sdata.t$ID==i),function(g)
        log(sdata.t$Surv.Time[g])*(sdata.t$status.1[g]-((sdata.t$Surv.Time[g]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[g,],ncol=1)))))+sdata.t$status.1[g]/alpha.t.S1)
      BA.b2<-matrix(BA.b2,nrow=1)
      BA.sec.t<-BB.b%*%BB.v%*%t(BA.b2)
      BA.sec<-BA.sec+BA.sec.t
      #AA
      AA.sec.t<-BA.b2%*%BB.v%*%t(BA.b2)
      AA.sec<-AA.sec+AA.sec.t
    }
    Bread2.t1<-cbind(GG.sec,GB.sec,GA.sec)
    Bread2.t2<-cbind(t(GB.sec),BB.sec,BA.sec)
    Bread2.t3<-cbind(t(GA.sec),t(BA.sec),AA.sec)
    BREAD2<-rbind(Bread2.t1,Bread2.t2,Bread2.t3)
    #Meat
    ##Cured
    Meat.1<-0
    pi.h<-rep(1,dim(sdata.t)[1])
    pi.h[CN]<-pi
    Z.t.1.h<-cbind(1,rep(Z.t.1[,2],c(as.numeric(table(sdata.t$ID)))))
    #for(i in 1:c(N*replicated)){
    #  G1.first<-Z.t.1.h[i,]*(sdata.t$Cure[i]-pi.h[i])
    #  B1.first<-sdata.t$Cure[i]*matrix(X.t.2[i,],ncol=1)*(sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))
    #  A1.first<-sdata.t$Cure[i]*log(sdata.t$Surv.Time[i])*(sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))+(sdata.t$status.1[i]/alpha.t.S1)
    #  Meat.t<-matrix(c(G1.first,B1.first,A1.first),ncol=1)
    #  Meat.1<-Meat.1+(Meat.t%*%t(Meat.t))}
    #
    #Meat-New
    #for(i in 1:N){
    #  Meat.t0<-0
    #  for(j in (replicated*(i-1)+1):(replicated*i)){
    #    G1.first<-Z.t.1.h[j,]*(sdata.t$Cure[j]-pi.h[j])
    #    B1.first<-sdata.t$Cure[j]*matrix(X.t.2[j,],ncol=1)*(sdata.t$status.1[j]-((sdata.t$Surv.Time[j]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[j,],ncol=1)))))
    #    A1.first<-sdata.t$Cure[j]*log(sdata.t$Surv.Time[j])*(sdata.t$status.1[j]-((sdata.t$Surv.Time[j]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[j,],ncol=1)))))+(sdata.t$status.1[j]/alpha.t.S1)
    #    Meat.t<-matrix(c(G1.first,B1.first,A1.first),ncol=1)
    #    Meat.t0<-Meat.t0+Meat.t
    #  }
    #  Meat.1<-Meat.1+(Meat.t0%*%t(Meat.t0))
    #}
    #Meat-New-1
    for(i in names(table(sdata.t$ID))){
      G1.first<-sapply(which(sdata.t$ID==i),function(g)
        Z.t.1.h[g,]*(sdata.t$Cure[g]-pi.h[g]))
      G1.first<-apply(G1.first,1,sum)
      
      B1.first<-sapply(which(sdata.t$ID==i),function(g)
        sdata.t$Cure[g]*matrix(X.t.2[g,],ncol=1)*(sdata.t$status.1[g]-((sdata.t$Surv.Time[g]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[g,],ncol=1)))))
      )
      B1.first<-apply(B1.first,1,sum)
      
      A1.first<-sapply(which(sdata.t$ID==i),function(g)(
        sdata.t$Cure[g]*log(sdata.t$Surv.Time[g])*(sdata.t$status.1[g]-((sdata.t$Surv.Time[g]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[g,],ncol=1)))))+(sdata.t$status.1[g]/alpha.t.S1)
      ))
      A1.first<-sum(A1.first)
      Meat.t<-matrix(c(G1.first,B1.first,A1.first),ncol=1)
      Meat.1<-Meat.1+(Meat.t%*%t(Meat.t))
    }
    
    estimated.V<-(solve(-BREAD-(BREAD2))%*%(Meat.1)%*%t(solve(-BREAD-(BREAD2))))
    estimated.V1<-(solve(BREAD)%*%(Meat.1)%*%solve(BREAD))
    #estimated.V1<-(-BREAD-Meat.1)
    #(var.SW<-sqrt(diag(estimated.V)))
    (var.SW<-(diag(estimated.V)))
    (var.SW1<-(diag(estimated.V1)))
    
    GAMMA.SW.bv<-rbind(GAMMA.SW.bv,var.SW[1:2])
    GAMMA.SW.bv1<-rbind(GAMMA.SW.bv1,var.SW1[1:2])
    BETA.SW.bv<-rbind(BETA.SW.bv,var.SW[3:4])
    BETA.SW.bv1<-rbind(BETA.SW.bv1,var.SW1[3:4])
    ALPHA.SW.bv<-c(ALPHA.SW.bv,var.SW[5])
    ALPHA.SW.bv1<-c(ALPHA.SW.bv1,var.SW1[5])
    
    
    
    print(sim)
    #print(apply(BETA.SW.bv,2,mean))
    print(apply(beta.S,2,var))
    #print(apply(BETA.SW.bv,2,mean))
  })

mean(alpha.B)
#which(alpha.B==min(alpha.B))

mean((alpha.B-(True.value.alpha)))
#mean((alpha.B-(1)))
var(alpha.B)
mean(ALPHA.SW.bv)
mean(ALPHA.SW.bv1)
#
sqrt(mean((alpha.B-(True.value.alpha))^2))
#sqrt(mean((alpha.B-(1))^2))

CP.a<-c();CP.a1<-c()

for(i in 1:1000){
  #SW
  L.B<-alpha.B[i]+qnorm(0.025)*sqrt(ALPHA.SW.bv[i])
  U.B<-alpha.B[i]+qnorm(0.975)*sqrt(ALPHA.SW.bv[i])
  L.B1<-alpha.B[i]+qnorm(0.025)*sqrt(ALPHA.SW.bv1[i])
  U.B1<-alpha.B[i]+qnorm(0.975)*sqrt(ALPHA.SW.bv1[i])
  #BT
  if(L.B<(True.value.alpha)&(True.value.alpha)<U.B){CP.a<-c(CP.a,1)}else{CP.a<-c(CP.a,0)}
  if(L.B1<(True.value.alpha)&(True.value.alpha)<U.B1){CP.a1<-c(CP.a1,1)}else{CP.a1<-c(CP.a1,0)}
  #if(L.B<(1)&(1)<U.B){CP.a<-c(CP.a,1)}else{CP.a<-c(CP.a,0)}
  #if(L.B1<(1)&(1)<U.B1){CP.a1<-c(CP.a1,1)}else{CP.a1<-c(CP.a1,0)}
}
mean(CP.a)
mean(CP.a1)


apply(beta.S,2,mean)

#beta.S[549,]

#Type I
#mean(beta.S[,1]-log(2))
#Type II
mean(beta.S[,1]-True.value.beta[1])


#Type I
#mean(beta.S[,2]-(-1))
#Type II
mean(beta.S[,2]-True.value.beta[2])
#Type I high censored rate

#as.numeric(which(abs(beta.S[,2])>2))

apply(beta.S,2,var)
apply(BETA.SW.bv,2,mean)
apply(BETA.SW.bv1,2,mean)

#0.002105928 0.003611452  
#Type I
#sqrt(mean((beta.S[,1]-log(2))^2))
#Type II
sqrt(mean((beta.S[,1]-True.value.beta[1])^2))

#Type I
#sqrt(mean((beta.S[,2]-(-1))^2))
#Type II
sqrt(mean((beta.S[,2]-True.value.beta[2])^2))


CP<-c();CP1<-c()
#CP.b<-c()
for(i in 1:1000){
  #SW
  L.B<-beta.S[i,1]+qnorm(0.025)*sqrt(BETA.SW.bv[i,1])
  U.B<-beta.S[i,1]+qnorm(0.975)*sqrt(BETA.SW.bv[i,1])
  L.B1<-beta.S[i,1]+qnorm(0.025)*sqrt(BETA.SW.bv1[i,1])
  U.B1<-beta.S[i,1]+qnorm(0.975)*sqrt(BETA.SW.bv1[i,1])
  #
  #if(L.B<(log(2))&(log(2))<U.B){CP<-c(CP,1)}else{CP<-c(CP,0)}
  #if(L.B1<(log(2))&(log(2))<U.B1){CP1<-c(CP1,1)}else{CP1<-c(CP1,0)}
  if(L.B<(True.value.beta[1])&(True.value.beta[1])<U.B){CP<-c(CP,1)}else{CP<-c(CP,0)}
  if(L.B1<(True.value.beta[1])&(True.value.beta[1])<U.B1){CP1<-c(CP1,1)}else{CP1<-c(CP1,0)}
}
mean(CP)
mean(CP1)
#mean(CP.b)

CP.1<-c();CP1.1<-c()
#CP.1.b<-c()
for(i in 1:1000){
  #SW
  L.B<-beta.S[i,2]+qnorm(0.025)*sqrt(BETA.SW.bv[i,2])
  U.B<-beta.S[i,2]+qnorm(0.975)*sqrt(BETA.SW.bv[i,2])
  L.B1<-beta.S[i,2]+qnorm(0.025)*sqrt(BETA.SW.bv1[i,2])
  U.B1<-beta.S[i,2]+qnorm(0.975)*sqrt(BETA.SW.bv1[i,2])
  #
  #if(L.B<(-1)&(-1)<U.B){CP.1<-c(CP.1,1)}else{CP.1<-c(CP.1,0)}
  #if(L.B1<(-1)&(-1)<U.B1){CP1.1<-c(CP1.1,1)}else{CP1.1<-c(CP1.1,0)}
  if(L.B<(True.value.beta[2])&(True.value.beta[2])<U.B){CP.1<-c(CP.1,1)}else{CP.1<-c(CP.1,0)}
  if(L.B1<(True.value.beta[2])&(True.value.beta[2])<U.B1){CP1.1<-c(CP1.1,1)}else{CP1.1<-c(CP1.1,0)}
}
mean(CP.1)
mean(CP1.1)
#mean(CP.1.b)

apply(gamma.S,2,mean)

#gamma.S[549,]
#gamma.S[which(abs(gamma.S[,2])>3),]
#Nu<-as.numeric(which(abs(gamma.S[,2])>3))
#Nu
#Type I II
mean(gamma.S[,1]-0.4)
mean(gamma.S[,2]+1)


apply(gamma.S,2,var)
apply(GAMMA.SW.bv,2,mean)
apply(GAMMA.SW.bv1,2,mean)
#Type I II
sqrt(mean((gamma.S[,1]-0.4)^2))
sqrt(mean((gamma.S[,2]+1)^2))
#Type I high censored rate

CP.2<-c();CP1.2<-c()
#CP.2.b<-c()
for(i in 1:1000){
  #SW
  L.B<-gamma.S[i,1]+qnorm(0.025)*sqrt(GAMMA.SW.bv[i,1])
  U.B<-gamma.S[i,1]+qnorm(0.975)*sqrt(GAMMA.SW.bv[i,1])
  L.B1<-gamma.S[i,1]+qnorm(0.025)*sqrt(GAMMA.SW.bv1[i,1])
  U.B1<-gamma.S[i,1]+qnorm(0.975)*sqrt(GAMMA.SW.bv1[i,1])
  #
  if(L.B<0.4&0.4<U.B){CP.2<-c(CP.2,1)}else{CP.2<-c(CP.2,0)}
  if(L.B1<0.4&0.4<U.B1){CP1.2<-c(CP1.2,1)}else{CP1.2<-c(CP1.2,0)}
}
mean(CP.2)
mean(CP1.2)
#mean(CP.2.b)

CP.3<-c();CP1.3<-c()
#CP.3.b<-c()
for(i in 1:1000){
  #SW
  L.B<-gamma.S[i,2]+qnorm(0.025)*sqrt(GAMMA.SW.bv[i,2])
  U.B<-gamma.S[i,2]+qnorm(0.975)*sqrt(GAMMA.SW.bv[i,2])
  L.B1<-gamma.S[i,2]+qnorm(0.025)*sqrt(GAMMA.SW.bv1[i,2])
  U.B1<-gamma.S[i,2]+qnorm(0.975)*sqrt(GAMMA.SW.bv1[i,2])
  #
  if(L.B<(-1)&(-1)<U.B){CP.3<-c(CP.3,1)}else{CP.3<-c(CP.3,0)}
  if(L.B1<(-1)&(-1)<U.B1){CP1.3<-c(CP1.3,1)}else{CP1.3<-c(CP1.3,0)}
}
mean(CP.3)
mean(CP1.3)
#mean(CP.3.b)

#=========histogram of estimates=========================
#
D1<-data.frame(Gamma.0=gamma.S[,1],Gamma.1=gamma.S[,2],Beta.0=beta.S[,1],Beta.1=beta.S[,2],
               Alpha=alpha.B)

#gamma.0
Hist.G0<-ggplot(D1,aes(x =Gamma.0)) + geom_histogram(aes(y = ..density..),colour = 1, fill = "white",bins=30) +
  geom_density(adjust = 2,colour="blue",size=1.5,kernel = c("gaussian"))+
  labs(x=TeX("$\\hat{\\gamma}_{0,EGMM2^{o}}$"))+
  theme_bw() + theme(panel.border = element_blank(), 
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), 
                     axis.line = element_line(colour = "black"),
                     text = element_text(size = 18),
                     plot.margin=margin(r=10))

+
  scale_y_continuous(breaks = c(0.00,0.25,0.50,0.75,1.00), 
                     labels = c("0.00","0.25","0.50","0.75",""))
#Hist.G0
#gamma.1
Hist.G1<-ggplot(D1,aes(x=Gamma.1)) + geom_histogram(aes(y = ..density..),colour = 1, fill = "white",bins=30) +
  geom_density(adjust = 2,colour="blue",size=1.5,kernel = c("gaussian"))+
  labs(x=TeX("$\\hat{\\gamma}_{1,EGMM2^{o}}$"))+
  theme_bw() + theme(panel.border = element_blank(), 
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), 
                     axis.line = element_line(colour = "black"),
                     text = element_text(size = 18),
                     plot.margin=margin(r=10))

+
  scale_y_continuous(breaks = c(0,0.3,0.6,0.9,1.2), 
                     labels = c("0.0","0.3","0.6","0.9",""))
#beta.0
Hist.B0<-ggplot(D1,aes(x=Beta.0)) + geom_histogram(aes(y = ..density..),colour = 1, fill = "white",bins=30) +
  geom_density(adjust = 2,colour="blue",size=1.5,kernel = c("gaussian"))+
  labs(x=TeX("$\\hat{\\beta}^{*}_{0,EGMM2^{o}}$"))+
  theme_bw() + theme(panel.border = element_blank(), 
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), 
                     axis.line = element_line(colour = "black"),
                     text = element_text(size = 18),
                     plot.margin=margin(r=10))


+
  scale_y_continuous(breaks = c(0,5,10,15), 
                     labels = c("0.0","5.0","10.0","15.0"))
#beta.1
Hist.B1<-ggplot(D1,aes(x =Beta.1)) + geom_histogram(aes(y = ..density..),colour = 1, fill = "white",bins=30) +
  geom_density(adjust = 2,colour="blue",size=1.5,kernel = c("gaussian"))+
  labs(x=TeX("$\\hat{\\beta}^{*}_{1,EGMM2^{o}}$"))+
  theme_bw() + theme(panel.border = element_blank(), 
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), 
                     axis.line = element_line(colour = "black"),
                     text = element_text(size = 18),
                     plot.margin=margin(r=10))+
  scale_y_continuous(breaks = c(0,1,2,3),
                     labels = c("0.0","1.0","2.0","3.0"))

#alpha
Hist.A<-ggplot(D1,aes(x=Alpha)) + geom_histogram(aes(y = ..density..),colour = 1, fill = "white",bins=30) +
  geom_density(adjust=2,colour="blue",size=1.5,kernel = c("gaussian"))+
  labs(x=TeX("$\\hat{\\alpha}^{*}_{EGMM2^{o}}$"))+
  theme_bw() + theme(panel.border = element_blank(), 
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), 
                     axis.line = element_line(colour = "black"),
                     text = element_text(size = 18),
                     plot.margin=margin(r=10))
+
  scale_y_continuous(breaks = c(0,5,10,15,20),
                     labels = c("0.0","5.0","10.0","15.0","20.0"))
#
figure <- ggarrange(Hist.G0,Hist.G1,Hist.B0,Hist.B1,Hist.A,ncol = 2,nrow = 3)
figure



#observed data log-likelihood function: BIC
loglike.observe<-function(theta,data){
  theta<-theta.1
  data<-data.1
  pi.uncured<-matrix(1,ncol=1,nrow=dim(data)[1])
  pi.uncured[CN,]<-exp(theta[3]+theta[4]*data[CN,7])/(1+exp(theta[3]+theta[4]*data[CN,7]))
  S_h<-exp(-data[,1]/240)
  S_u<-exp(-exp(theta[1]+theta[2]*data[,2])*data[,1]^(theta[5]))
  f_u<-(theta[5]*exp(theta[1]+theta[2]*data[,2])*data[,1]^(theta[5]-1))*S_u
  #
  logLik.o.sum<-sum(data[,5]*log(pi.uncured*f_u)+(1-data[,5])*log(pi.uncured*S_u+(1-pi.uncured)*S_h))
  logLik.o.sum.1<-sum(data[,5]*log(pi.uncured*f_u)+(1-data[,5])*log(pi.uncured*S_u+(1-pi.uncured)*1))
  
  return(list(V1=logLik.o.sum,V2=logLik.o.sum.1))
}


data.1<-Data.type2.0.2[[1]]
theta.1<-c(beta.S[1,],gamma.S[1,],alpha.B[1])

-2*loglike.observe(theta.1,data.1)$V1+2*loglike.observe(theta.1,data.1)$V2





#==========================================


#
#Dn't run=====
moments.G1<-function(theta,data){
  alpha.u1<-alpha.u
  y<-matrix(data[,1],ncol=1)
  x<-matrix(data[,2])
  X.D<-as.matrix(data[,8:dim(data)[2]])
  #
  Wi<-matrix(data[,6],ncol=1)
  theta.1<-matrix(theta,ncol=1)
  status<-data[,5]
  G<-matrix(0,ncol=1,nrow=dim(data)[1])
  q.1<-cbind(1,x)
  mu<-q.1%*%theta.1
  G<-c(status-(exp(mu)*(y)^(alpha.u1)))
  G.1<-c(Wi)*c(G)
  #
  G.2<-c(G.1)*cbind(1,X.D)
  
  return(G.2)
}

#==================
#=======Another converage for beta==================
K.2<-0
while(1){
  my_gmm.5<-gmm(moments.G1,x=sdata.t,t0=c(beta.00[1],beta.00[2]),type="iterative",crit = 1e-25, 
                wmatrix = "optimal", method = "Nelder-Mead", control = list(reltol = 1e-25, maxit = 20000))
  (beta.001<-my_gmm.5$coefficients)
  #(beta.001<-c((b.0-((b.2^2)/2)),(b.1+r.1*b.2)))
  #alpha
  Beta.b<-matrix(beta.001,ncol=1)
  #x<-matrix(sdata.t[,2])
  #x.1<-rep(1,dim(sdata.t)[1])
  #q.1<-cbind(x.1,x)
  #alpha.S<--sum(sdata.t$status)/sum(Wi*log(sdata.t$Surv.Time)*(sdata.t$status-(sdata.t$Surv.Time^alpha.u)*exp(q.1%*%Beta.b)))
  my_gmm.t3<-gmm(moments.alpha,x=sdata.t,t0=c(alpha.u),optfct=c("nlminb"))
  (alpha.S<-my_gmm.t3$coefficients)
  #Cure
  sdata.t.2<-sdata.t[CN,]
  my_gmm.4<-gmm(moments.g.1,x=sdata.t.2,t0=c(gamma.00[1],gamma.00[2]),type="iterative",crit = 1e-25,
                wmatrix = "optimal",method = "Nelder-Mead",control = list(reltol = 1e-25, maxit=20000))
  (gamma.001<-my_gmm.4$coefficients)
  if(max(abs(beta.001-beta.00))<1e-03&max(abs(alpha.S-alpha.u))<1e-03|K.2>100)
    break
  alpha.u<-alpha.S
  beta.00<-beta.001
  K.2<-K.2+1
}
if(max(abs(gamma.001-gamma.00))<1e-03|K.1>100)
  break
gamma.00<-gamma.001
K.1<-K.1+1

###########################Fixed replicated time

#Bootstrapping: estimated variance Fixed replicated time
#Sandwitch
Z.t.1<-data.matrix(cbind(1,sdata.t[CN,7]))
X.t.1<-data.matrix(cbind(1,sdata.t[,2]))
X.t.2<-q.2
#X.t.1<-data.matrix(cbind(1,sdata.t[,8]))
gamma.11<-matrix(gamma.001,ncol=1)
beta.11<-matrix(beta.001,ncol=1)
alpha.t.S1<-alpha.S
pi<-exp(Z.t.1%*%gamma.11)/(1+exp(Z.t.1%*%gamma.11))
#Bread 1
G1.sec<-0;B1.sec<-0;B2.sec<-0;A1.sec<-0;A2.sec<-0
##cured
for(i in 1:N){
  pi.sec.t<--(matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1))*pi[i]*(1-pi[i])
  G1.sec<-G1.sec+pi.sec.t
}
##survival
for(i in 1:c(N*replicated)){
  B1.sec.t<--sdata.t$Cure[i]*(matrix(X.t.2[i,],ncol=1)%*%matrix(X.t.1[i,],nrow=1))*(sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))
  B1.sec<-B1.sec+B1.sec.t
  B2.sec.t<--sdata.t$Cure[i]*matrix(X.t.2[i,],ncol=1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))*(sdata.t$Surv.Time[i]^alpha.t.S1)*log(sdata.t$Surv.Time[i])
  B2.sec<-B2.sec+B2.sec.t
  A1.sec.t<--sdata.t$Cure[i]*(sdata.t$Surv.Time[i]^alpha.t.S1)*log(sdata.t$Surv.Time[i])*matrix(X.t.1[i,],nrow=1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))
  A1.sec<-A1.sec+A1.sec.t
  A2.sec.t<--sdata.t$Cure[i]*((log(sdata.t$Surv.Time[i]))^2)*(sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))-(sdata.t$status.1[i]/(alpha.t.S1^2))
  A2.sec<-A2.sec+A2.sec.t
}
Bread.t1<-cbind(G1.sec,matrix(0,nrow=dim(Z.t.1)[2],ncol=dim(X.t.1)[2]),matrix(0,nrow=dim(Z.t.1)[2],ncol=1))
Bread.t2<-cbind(matrix(0,nrow=dim(X.t.1)[2],ncol=dim(Z.t.1)[2]),B1.sec,B2.sec)
Bread.t3<-cbind(matrix(0,nrow=1,ncol=dim(Z.t.1)[2]),A1.sec,A2.sec)
BREAD<-rbind(Bread.t1,Bread.t2,Bread.t3)
#
#Bread 2
##cured
GG.sec<-0;GB.sec<-0;GA.sec<-0;BB.sec<-0;BA.sec<-0;AA.sec<-0
for(i in 1:N){
  GG.sec.t<-matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1)*(sdata.t$Cure[CN[i]]*(1-sdata.t$Cure[CN[i]]))
  GG.sec<-GG.sec+GG.sec.t
  GB.sec.t<-matrix(Z.t.1[i,],ncol=1)%*%matrix(X.t.2[CN[i],],nrow=1)*(sdata.t$Cure[CN[i]]*(1-sdata.t$Cure[CN[i]]))*(sdata.t$status.1[CN[i]]-(sdata.t$Surv.Time[CN[i]]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[CN[i],],ncol=1))))
  GB.sec<-GB.sec+GB.sec.t
  GA.sec.t<-matrix(Z.t.1[i,],ncol=1)%*%(sdata.t$Cure[CN[i]]*(1-sdata.t$Cure[CN[i]]))*log(sdata.t$Surv.Time[CN[i]])*(sdata.t$status.1[CN[i]]-((sdata.t$Surv.Time[CN[i]]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[CN[i],],ncol=1))))+(sdata.t$status.1[CN[i]]/alpha.t.S1))
  GA.sec<-GA.sec+GA.sec.t
}
##Survival
#for(i in 1:c(N*replicated)){
#  BB.sec.t<-(c((sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))^2)*c(sdata.t$Cure[i]*(1-sdata.t$Cure[i])))*matrix(X.t.2[i,],ncol=1)%*%matrix(X.t.2[i,],nrow=1)
#  BB.sec<-BB.sec+BB.sec.t
#  BA.sec.t<-matrix(X.t.2[i,],ncol=1)*((sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1))))))*
#    ((sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1))))+sdata.t$status.1[i]/alpha.t.S1))*(sdata.t$Cure[i]*(1-sdata.t$Cure[i]))*log(sdata.t$Surv.Time[i])
#  BA.sec<-BA.sec+BA.sec.t
#  AA.sec.t<-((log(sdata.t$Surv.Time[i])*(sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))+sdata.t$status.1[i]/alpha.t.S1)^2)*(sdata.t$Cure[i]*(1-sdata.t$Cure[i]))
#  AA.sec<-AA.sec+AA.sec.t
#}
#Bread2.t1<-cbind(GG.sec,GB.sec,GA.sec)
#Bread2.t2<-cbind(t(GB.sec),BB.sec,BA.sec)
#Bread2.t3<-cbind(t(GA.sec),t(BA.sec),AA.sec)
#BREAD2<-rbind(Bread2.t1,Bread2.t2,Bread2.t3)
#
#Bread 2-New
for(i in 1:N){
  #BB
  BB.b<-sapply((replicated*(i-1)+1):(replicated*i),function(g)
    t(X.t.2[g,]*(sdata.t$status.1[g]-((sdata.t$Surv.Time[g]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[g,],ncol=1)))))))
  BB.v<-COV.Matrix(sdata.t$Cure[(replicated*(i-1)+1):(replicated*i)])
  BB.sec.t<-BB.b%*%BB.v%*%t(BB.b)
  BB.sec<-BB.sec+BB.sec.t
  #BA
  BA.b2<-sapply((replicated*(i-1)+1):(replicated*i),function(g)
    log(sdata.t$Surv.Time[g])*(sdata.t$status.1[g]-((sdata.t$Surv.Time[g]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[g,],ncol=1)))))+sdata.t$status.1[g]/alpha.t.S1)
  BA.b2<-matrix(BA.b2,nrow=1)
  BA.sec.t<-BB.b%*%BB.v%*%t(BA.b2)
  BA.sec<-BA.sec+BA.sec.t
  #AA
  AA.sec.t<-BA.b2%*%BB.v%*%t(BA.b2)
  AA.sec<-AA.sec+AA.sec.t
}
Bread2.t1<-cbind(GG.sec,GB.sec,GA.sec)
Bread2.t2<-cbind(t(GB.sec),BB.sec,BA.sec)
Bread2.t3<-cbind(t(GA.sec),t(BA.sec),AA.sec)
BREAD2<-rbind(Bread2.t1,Bread2.t2,Bread2.t3)
#Meat
##Cured
Meat.1<-0
pi.h<-rep(1,c(N*replicated))
pi.h[CN]<-pi
Z.t.1.h<-cbind(1,rep(Z.t.1[,2],each=replicated))
#for(i in 1:c(N*replicated)){
#  G1.first<-Z.t.1.h[i,]*(sdata.t$Cure[i]-pi.h[i])
#  B1.first<-sdata.t$Cure[i]*matrix(X.t.2[i,],ncol=1)*(sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))
#  A1.first<-sdata.t$Cure[i]*log(sdata.t$Surv.Time[i])*(sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))+(sdata.t$status.1[i]/alpha.t.S1)
#  Meat.t<-matrix(c(G1.first,B1.first,A1.first),ncol=1)
#  Meat.1<-Meat.1+(Meat.t%*%t(Meat.t))}
#
#Meat-New
#for(i in 1:N){
#  Meat.t0<-0
#  for(j in (replicated*(i-1)+1):(replicated*i)){
#    G1.first<-Z.t.1.h[j,]*(sdata.t$Cure[j]-pi.h[j])
#    B1.first<-sdata.t$Cure[j]*matrix(X.t.2[j,],ncol=1)*(sdata.t$status.1[j]-((sdata.t$Surv.Time[j]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[j,],ncol=1)))))
#    A1.first<-sdata.t$Cure[j]*log(sdata.t$Surv.Time[j])*(sdata.t$status.1[j]-((sdata.t$Surv.Time[j]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[j,],ncol=1)))))+(sdata.t$status.1[j]/alpha.t.S1)
#    Meat.t<-matrix(c(G1.first,B1.first,A1.first),ncol=1)
#    Meat.t0<-Meat.t0+Meat.t
#  }
#  Meat.1<-Meat.1+(Meat.t0%*%t(Meat.t0))
#}
#Meat-New-1
for(i in 1:N){
  G1.first<-sapply((replicated*(i-1)+1):(replicated*i),function(g)
    Z.t.1.h[g,]*(sdata.t$Cure[g]-pi.h[g]))
  G1.first<-apply(G1.first,1,sum)
  
  B1.first<-sapply((replicated*(i-1)+1):(replicated*i),function(g)
    sdata.t$Cure[g]*matrix(X.t.2[g,],ncol=1)*(sdata.t$status.1[g]-((sdata.t$Surv.Time[g]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[g,],ncol=1)))))
  )
  B1.first<-apply(B1.first,1,sum)
  
  A1.first<-sapply((replicated*(i-1)+1):(replicated*i),function(g)(
    sdata.t$Cure[g]*log(sdata.t$Surv.Time[g])*(sdata.t$status.1[g]-((sdata.t$Surv.Time[g]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[g,],ncol=1)))))+(sdata.t$status.1[g]/alpha.t.S1)
  ))
  A1.first<-sum(A1.first)
  Meat.t<-matrix(c(G1.first,B1.first,A1.first),ncol=1)
  Meat.1<-Meat.1+(Meat.t%*%t(Meat.t))
}

estimated.V<-(solve(-BREAD-(BREAD2))%*%(Meat.1)%*%t(solve(-BREAD-(BREAD2))))
estimated.V1<-(solve(BREAD)%*%(Meat.1)%*%solve(BREAD))
#estimated.V1<-(-BREAD-Meat.1)
#(var.SW<-sqrt(diag(estimated.V)))
(var.SW<-(diag(estimated.V)))
(var.SW1<-(diag(estimated.V1)))

GAMMA.SW.bv<-rbind(GAMMA.SW.bv,var.SW[1:2])
GAMMA.SW.bv1<-rbind(GAMMA.SW.bv1,var.SW1[1:2])
BETA.SW.bv<-rbind(BETA.SW.bv,var.SW[3:4])
BETA.SW.bv1<-rbind(BETA.SW.bv1,var.SW1[3:4])
ALPHA.SW.bv<-c(ALPHA.SW.bv,var.SW[5])
ALPHA.SW.bv1<-c(ALPHA.SW.bv1,var.SW1[5])

#===============================================
#Bootstrapping: estimated variance
#Sandwitch
Z.t.1<-data.matrix(cbind(1,sdata.t[CN,7]))
X.t.1<-data.matrix(cbind(1,sdata.t[,2]))
X.t.2<-q.2

#X.t.1<-data.matrix(cbind(1,sdata.t[,8]))
gamma.11<-matrix(gamma.001,ncol=1)
beta.11<-matrix(beta.001,ncol=1)
alpha.t.S1<-alpha.S
pi<-exp(Z.t.1%*%gamma.11)/(1+exp(Z.t.1%*%gamma.11))
#Bread 1
G1.sec<-0;B1.sec<-0;B2.sec<-0;A1.sec<-0;A2.sec<-0
##cured
for(i in 1:N){
  pi.sec.t<--(matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1))*pi[i]*(1-pi[i])
  G1.sec<-G1.sec+pi.sec.t
}
##survival
for(i in 1:c(N*replicated)){
  B1.sec.t<--sdata.t$Cure[i]*(matrix(X.t.2[i,],ncol=1)%*%matrix(X.t.1[i,],nrow=1))*(sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))
  B1.sec<-B1.sec+B1.sec.t
  B2.sec.t<--sdata.t$Cure[i]*matrix(X.t.2[i,],ncol=1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))*(sdata.t$Surv.Time[i]^alpha.t.S1)*log(sdata.t$Surv.Time[i])
  B2.sec<-B2.sec+B2.sec.t
  A1.sec.t<--sdata.t$Cure[i]*(sdata.t$Surv.Time[i]^alpha.t.S1)*log(sdata.t$Surv.Time[i])*matrix(X.t.1[i,],nrow=1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))
  A1.sec<-A1.sec+A1.sec.t
  A2.sec.t<--sdata.t$Cure[i]*((log(sdata.t$Surv.Time[i]))^2)*(sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))-(sdata.t$status.1[i]/(alpha.t.S1^2))
  A2.sec<-A2.sec+A2.sec.t
}
Bread.t1<-cbind(G1.sec,matrix(0,nrow=dim(Z.t.1)[2],ncol=dim(X.t.1)[2]),matrix(0,nrow=dim(Z.t.1)[2],ncol=1))
Bread.t2<-cbind(matrix(0,nrow=dim(X.t.1)[2],ncol=dim(Z.t.1)[2]),B1.sec,B2.sec)
Bread.t3<-cbind(matrix(0,nrow=1,ncol=dim(Z.t.1)[2]),A1.sec,A2.sec)
BREAD<-rbind(Bread.t1,Bread.t2,Bread.t3)
#
#Bread 2
##cured
GG.sec<-0;GB.sec<-0;GA.sec<-0;BB.sec<-0;BA.sec<-0;AA.sec<-0
for(i in 1:N){
  GG.sec.t<-matrix(Z.t.1[i,],ncol=1)%*%matrix(Z.t.1[i,],nrow=1)*(sdata.t$Cure[CN[i]]*(1-sdata.t$Cure[CN[i]]))
  GG.sec<-GG.sec+GG.sec.t
  GB.sec.t<-matrix(Z.t.1[i,],ncol=1)%*%matrix(X.t.2[CN[i],],nrow=1)*(sdata.t$Cure[CN[i]]*(1-sdata.t$Cure[CN[i]]))*(sdata.t$status.1[CN[i]]-(sdata.t$Surv.Time[CN[i]]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[CN[i],],ncol=1))))
  GB.sec<-GB.sec+GB.sec.t
  GA.sec.t<-matrix(Z.t.1[i,],ncol=1)%*%(sdata.t$Cure[CN[i]]*(1-sdata.t$Cure[CN[i]]))*log(sdata.t$Surv.Time[CN[i]])*(sdata.t$status.1[CN[i]]-((sdata.t$Surv.Time[CN[i]]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[CN[i],],ncol=1))))+(sdata.t$status.1[CN[i]]/alpha.t.S1))
  GA.sec<-GA.sec+GA.sec.t
}
##Survival
for(i in 1:c(N*replicated)){
  BB.sec.t<-(c((sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))^2)*c(sdata.t$Cure[i]*(1-sdata.t$Cure[i])))*matrix(X.t.2[i,],ncol=1)%*%matrix(X.t.2[i,],nrow=1)
  BB.sec<-BB.sec+BB.sec.t
  BA.sec.t<-matrix(X.t.2[i,],ncol=1)*((sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1))))))*
    ((sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1))))+sdata.t$status.1[i]/alpha.t.S1))*(sdata.t$Cure[i]*(1-sdata.t$Cure[i]))*log(sdata.t$Surv.Time[i])
  BA.sec<-BA.sec+BA.sec.t
  AA.sec.t<-((log(sdata.t$Surv.Time[i])*(sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))+sdata.t$status.1[i]/alpha.t.S1)^2)*(sdata.t$Cure[i]*(1-sdata.t$Cure[i]))
  AA.sec<-AA.sec+AA.sec.t
}
Bread2.t1<-cbind(GG.sec,GB.sec,GA.sec)
Bread2.t2<-cbind(t(GB.sec),BB.sec,BA.sec)
Bread2.t3<-cbind(t(GA.sec),t(BA.sec),AA.sec)
BREAD2<-rbind(Bread2.t1,Bread2.t2,Bread2.t3)
#
#Meat
##Cured
Meat.1<-0
pi.h<-rep(1,c(N*replicated))
pi.h[CN]<-pi
Z.t.1.h<-cbind(1,rep(Z.t.1[,2],each=5))
for(i in 1:c(N*replicated)){
  G1.first<-Z.t.1.h[i,]*(sdata.t$Cure[i]-pi.h[i])
  B1.first<-sdata.t$Cure[i]*matrix(X.t.2[i,],ncol=1)*(sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))
  A1.first<-sdata.t$Cure[i]*log(sdata.t$Surv.Time[i])*(sdata.t$status.1[i]-((sdata.t$Surv.Time[i]^alpha.t.S1)*c(exp(t(beta.11)%*%matrix(X.t.1[i,],ncol=1)))))+(sdata.t$status.1[i]/alpha.t.S1)
  Meat.t<-matrix(c(G1.first,B1.first,A1.first),ncol=1)
  Meat.1<-Meat.1+(Meat.t%*%t(Meat.t))
}
#
estimated.V<-(solve(-BREAD-BREAD2)%*%(Meat.1)%*%t(solve(-BREAD-BREAD2)))
#estimated.V<-(solve(BREAD)%*%(Meat.1)%*%solve(BREAD))
#(var.SW<-sqrt(diag(estimated.V)))
(var.SW<-(diag(estimated.V)))
GAMMA.SW.bv<-rbind(GAMMA.SW.bv,var.SW[1:2])
BETA.SW.bv<-rbind(BETA.SW.bv,var.SW[3:4])
ALPHA.SW.bv<-c(ALPHA.SW.bv,var.SW[5])
